var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = BurgersJoint","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"This page documents all modules and functions in BurgersJoint.","category":"page"},{"location":"api/#BurgersEquation","page":"API reference","title":"BurgersEquation","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [BurgersJoint.BurgersEquation]","category":"page"},{"location":"api/#BurgersJoint.BurgersEquation.analytical_slope-Tuple{Any, Any}","page":"API reference","title":"BurgersJoint.BurgersEquation.analytical_slope","text":"analytical_slope(x, t; nu=viscosity(), n=50)\n\nComputes the analytical slope from the analytical solution using central differences.\n\n\n\n\n\n","category":"method"},{"location":"api/#BurgersJoint.BurgersEquation.analytical_solution-Tuple{Any, Any}","page":"API reference","title":"BurgersJoint.BurgersEquation.analytical_solution","text":"analytical_solution(x, t; nu=viscosity(), n=50)\n\nComputes the analytical solution u(xt)` of Burgers' equation using the convolution form from Cole's transformation and Hermite integration. This assumes initial condition u(x,0) = -sin(pi*x).\n\nThe solution is expressed as\n\nu(xt) = fracI_1(xt)I_2(xt),\n\nwhere\n\nI_1(xt) = -int_-infty^+infty sin(pi(x-eta)) f(x-eta) expleft(-fraceta^24 nu tright) mathrmdeta,\n\nI_2(xt) = int_-infty^+infty f(x-eta) expleft(-fraceta^24 nu tright) mathrmdeta.\n\nHere, f(y) = exp(-cos(pi y)(2pinu)). A change of variables eta = S    z with S = sqrt4 nu t is used so that\n\ndeta = S mathrmdz quad expleft(-fraceta^24nu tright) = exp(-z^2).\n\nHermite quadrature (with n nodes, default n = 50) is used to evaluate these integrals.\n\n\n\n\n\n","category":"method"},{"location":"api/#BurgersJoint.BurgersEquation.burgers_ic-Tuple{Any}","page":"API reference","title":"BurgersJoint.BurgersEquation.burgers_ic","text":"burgers_ic(x)\n\nInitial condition for Burgers’ equation, matching the setup in Basdevant1986:\n\n``u(x, 0) = -\\sin(\\pi x)``.\n\n\n\n\n\n","category":"method"},{"location":"api/#BurgersJoint.BurgersEquation.f-Tuple{Any}","page":"API reference","title":"BurgersJoint.BurgersEquation.f","text":"f(y; nu=viscosity())\n\nDefine the function f(y) as given in Basdevant1986.\n\n\n\n\n\n","category":"method"},{"location":"api/#BurgersJoint.BurgersEquation.viscosity-Tuple{}","page":"API reference","title":"BurgersJoint.BurgersEquation.viscosity","text":"viscosity()\n\nReturns the kinematic viscosity used in Basdevant1986: nu = 1(100pi).\n\n\n\n\n\n","category":"method"},{"location":"api/#FourierSpectral","page":"API reference","title":"FourierSpectral","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [BurgersJoint.FourierSpectral]","category":"page"},{"location":"api/#BurgersJoint.FourierSpectral.solveFourier-Tuple{Any}","page":"API reference","title":"BurgersJoint.FourierSpectral.solveFourier","text":"solveFourier(Nx; dt=1e-3, tmax=2.0, nu=viscosity(), ic=burgers_ic, alias_factor=2/3)\n\nSolve the 1D Burgers equation on x in -11 using a Fourier-Galerkin method  (based on Basdevant1986).\n\nArguments:\n\nNx: Number of grid points (also number of Fourier modes).\n\nKeyword arguments:\n\ndt: Time step.\ntmax: Final simulation time.\nnu: Kinematic viscosity (defaults to BurgersEquation.viscosity()).\nalias_factor: Factor for dealiasing (default = 2/3 for the 2/3 rule Fourier Galerkin).               Use 1 for Fourier pseudospectral.\n\nOutput:\n\nx: Real-space grid of length Nx.\nu_final: Final solution in real space (length Nx).\ntimes: Vector of time steps.\nhistory: Vector of solution snapshots at times t = n/pi, n=0,1,2,...\n\n\n\n\n\n","category":"method"},{"location":"#BurgersJoint-Documentation","page":"Home","title":"BurgersJoint Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for BurgersJoint. This project provides various methods to solve Burgers' equation as formulated in     Basdevant et al. (1986), \"Spectral and Finite Difference Solutions of the Burgers Equation\"     (Basdevant1986).","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BurgersJoint is a Julia-based project that compares Fourier Galerkin, Fourier pseudospectral, Chebyshev Tau, finite difference, and PINN methods for solving Burgers’ equation.","category":"page"},{"location":"#Modules","page":"Home","title":"Modules","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BurgersEquation: Defines the PDE, initial conditions, and analytical solutions.\nFourierSpectral: Implements the Fourier Galerkin solver.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BurgersJoint\nx = range(-1, 1, length=100)\nt = 0.5\nu_analytical = BurgersEquation.analytical_solution.(x, t)","category":"page"}]
}
